@page "/"
@using Galerij.Blazorized.Components
@inject ImageService ImageService
@inject SettingsService SettingsService
@inject IJSRuntime JS
@inject NavigationManager Navigation
@implements IDisposable

<main>
    <img id="image" class="app-img" @onclick="@OpenSettings"/>
</main>

@code {
    private List<ImageItem> _images = new();
    private SettingsModel _settings = new();
    private System.Timers.Timer _timer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        SettingsService.SettingsChanged += async (_, _) =>
        {
            await InitializeGallery();
        };

        await InitializeGallery();
    }

    private async Task InitializeGallery()
    {
        _settings = await SettingsService.Load();
        // await JS.InvokeVoidAsync("setRootVariable", "--bg-color", _settings.BackgroundColor);
        _images = _settings.SelectedCollection is not null 
            ? _images = (await ImageService.GetImages(_settings.SelectedCollection)).ToList()
            : _images = (await ImageService.GetAllImages()).ToList();

        _timer = new System.Timers.Timer(_settings.PlaybackSpeedSeconds * 1000);
        _timer.Elapsed += async (_, _) =>
        {
            try
            {
                await LoadNextImage();
            }
            catch (Exception)
            {

            }
        };
        _timer.AutoReset = true;
        _timer.Start();

        await LoadNextImage();
    }

    private async Task LoadNextImage()
    {
        var randomIndex = Random.Shared.Next(0, _images.Count - 1);
        var imageStream = await ImageService.GetImageData(_images[randomIndex]);
        using var dotnetStreamRef = new DotNetStreamReference(imageStream);
        await JS.InvokeVoidAsync("setImage", "image", dotnetStreamRef);
    }

    private void OpenSettings() => Navigation.NavigateTo("/settings");

    void IDisposable.Dispose()
    {
        _timer?.Stop();
        _timer?.Dispose();
    }
}